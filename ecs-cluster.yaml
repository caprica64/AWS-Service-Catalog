AWSTemplateFormatVersion: '2010-09-09'
Description: "Cluster template for ECS/Fargate"

Parameters:
  ServiceName:
    Type: String
    Description: "Please put the ServiceName that you would like to create"
    Default: "simba"

  ServicePort:
    Type: Number
    Description: "Entre com o valor inl da porta de serviço"
    Default: 8080

  ECRRepoUri:
    Type: String
    Description: The ECR repo uri from central/tools account
    Default: 398618867443.dkr.ecr.sa-east-1.amazonaws.com/simba

  ServiceSubnet:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "Please put the Subnets that you would like to use for ECS Services and containers"
    Default: "subnet-067ada310a6b75638,subnet-02dc93902c17ef5ed"
  
  VpcId:
    Type: String
    Description: "Projet VPC ID - can be imported or using environment parameters"
    Default: "vpc-0c2630a8eed5b8ba1"
  


  #------------------------------------------#
  # Certificates                             #
  #------------------------------------------#
  PrivateCAArn:
    Type: String
    Description: The ARN of the PrivateCA
    Default: 'arn:aws:acm-pca:sa-east-1:909501882723:certificate-authority/06bb3783-c5f2-4d1c-baf7-f650ff6216d9'

  CertificateDomainName:
    Type: String
    Description: The domain name of in the private issued certificate
    Default: 'simba.petrobras.com.br'

  CertificateOverride:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Description: >
      If you want to use an existing certificate, set this to 'true', and set the CertificateOverrideArn
      value with the arn of the certificate you wish to use. Otherwise leave 'false' (default)
    Default: "false"

  CertificateOverrideArn:
    Type: String
    Description: The ARN of the override certificate
    Default: 'none'
  

  #------------------------------------------#
  # Network, ALB subnet and security groups  #
  #------------------------------------------#
  AlbSubnet:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "Subnets where the ALB are setup."
    Default: "subnet-0c6a54383dae2fff5,subnet-0734f1738a6449866" 


  #------------------------------------------#
  # WAF rate limit                           #
  #------------------------------------------#
  ParamRateBasedLimit:
    Description: "This value is continually evaluated, and requests will be blocked once this limit is reached. The IP address is automatically unblocked after it falls below the limit."
    Type: Number
    Default: 1000    


  #------------------------------------------#
  # Tags                                     #
  #------------------------------------------#
  
  #-------------------#
  # Todos os recursos #
  #-------------------#
  OpsAmbiente:
    Description: "Tipo de ambiente"
    Type: String
    Default: "nao-produtivo"
    AllowedValues:
      - nao-produtivo
      - produtivo

  OpsProduto:
    Description: "Nome do produto"
    Type: String
    Default: ""  ### Entre com nome do produto

  SecConformidade:
    Description: "Tipo de conformidade necessaria"
    Type: String
    Default: "n/a"
    AllowedValues:
      - sox
      - lgpd
      - n/a
      - na

  OpsServico:
    Description: "Nome no servico de nuvem no BDGC"
    Type: String
    Default: ""  ### Entre com nome do serviço


  #-------------------#
  # Recursos de dados #
  #-------------------#
  SecClassificacao:
    Description: "Classificacao de seguranca"
    Type: String
    Default: "interna"
    AllowedValues:
      - interna
      - publica
      - confidencial
      - secreta


Conditions:
  CertificateOverrideTrue: !Equals 
    - !Ref CertificateOverride
    - "true"

  CertificateOverrideFalse: !Equals 
    - !Ref CertificateOverride
    - "false" 

  IsProduction: !Equals
    - !Ref OpsAmbiente
    - produtivo

#### ///// ####
Resources:

  #------------------------------------------#
  # ALB and Service Security Group           #
  #------------------------------------------#
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupName: ALBSecurityGroup  
        GroupDescription: Allows inbound traffic to ALB and outbound to ECS Service
        VpcId:
          Ref: VpcId
        SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !If [IsProduction, "0.0.0.0/0", "164.85.0.0/16"] 
          FromPort: 443
          ToPort: 443
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref ServicePort
          ToPort: !Ref ServicePort
          CidrIp: !ImportValue VpcCidr
          Description: Egress to ECS Service
        #--------Resource Tag block--------#          
        Tags:
        - Key: Name
          Value: !Sub "sgrp-ALB"
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico            
        #--------Resource Tag block--------#

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupName: ServiceSecurityGroup
        GroupDescription: Allows inbound traffic from ALB and outbound to Aurora and RIC services 
        VpcId:
          Ref: VpcId
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ServicePort
          ToPort: !Ref ServicePort
          Description: Allow ALB to reach container service port
          SourceSecurityGroupId:
            !Ref ALBSecurityGroup 
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.128.4.0/22
        - IpProtocol: tcp
          FromPort: 88
          ToPort: 88
          CidrIp: 10.128.4.0/22
        - IpProtocol: tcp
          FromPort: 123
          ToPort: 123
          CidrIp: 10.128.4.0/22
        - IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          CidrIp: 10.128.4.0/22
        - IpProtocol: tcp
          FromPort: 636
          ToPort: 636
          CidrIp: 10.128.4.0/22
        - IpProtocol: tcp
          FromPort: 3268
          ToPort: 3268
          CidrIp: 10.128.4.0/22
        - IpProtocol: tcp
          FromPort: 3269
          ToPort: 3269
          CidrIp: 10.128.4.0/22
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !ImportValue VpcCidr
          #DestinationSecurityGroupId: ## < avoid using as it created looped depedencies. Placeholder
          Description: Egress to SIMBA Aurora Database
        #--------Resource Tag block--------#
        Tags:
        - Key: Name
          Value: !Sub "sgrp-${ServiceName}" ## sgrp-${ServiceName}  ## !Sub "${ServiceName}
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico          
        #--------Resource Tag block--------#

  #------------------------------------------#
  # Service LogGroup                         #
  #------------------------------------------# 
  ServiceLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${ServiceName}-service-logs"
      RetentionInDays: 5
      #--------Resource Tag block--------#
      Tags:
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico  
      #--------Resource Tag block--------#    
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  #------------------------------------------#
  # ALB to be used with ECS service          #
  #------------------------------------------#
  
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      #- Key: access_logs.s3.enabled
      #  Value: 'false'
      #- Key: access_logs.s3.bucket
      #  Value: !Sub 's3-local-logs-${AWS::AccountId}-${AWS::Region}'
      #- Key: access_logs.s3.prefix
      #  Value: 'simba'
      # You will need to add a policy to the S3 bucket to allow this logging per:
      # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#enable-access-logging
      # Subnets: 
      #   - !ImportValue PublicSubnet1
      #   - !ImportValue PublicSubnet2
      Subnets:
        - !Select [0, !Ref AlbSubnet]
        - !Select [1, !Ref AlbSubnet]

      SecurityGroups:
        - !Ref ALBSecurityGroup
      #--------Resource Tag block--------#
      Tags:
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico  
      #--------Resource Tag block--------#   


  #------------------------------------------#
  # Target Group                             #
  #------------------------------------------#

  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: 'lb_cookie'
      TargetType: ip
      Port: !Ref ServicePort ### << We can refer service port number above from the Task Definition
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      #--------Resource Tag block--------#
      Tags:
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico  
      #--------Resource Tag block--------#  


  #------------------------------------------#
  # ALB Secure Listener, Rules and certs     #
  #------------------------------------------#
  ACMCertificate:
    Condition: CertificateOverrideFalse
    Type: "AWS::CertificateManager::Certificate"
    Properties: 
      CertificateAuthorityArn: !Ref PrivateCAArn
      CertificateTransparencyLoggingPreference: DISABLED
      DomainName: !Ref CertificateDomainName   

  CertificatesList:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties: 
      Certificates: 
        - CertificateArn: !If [CertificateOverrideTrue, !Ref CertificateOverrideArn, !Ref ACMCertificate]
      ListenerArn: !Ref ALBSecureListener   

  ALBSecureListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates: 
        - CertificateArn: !If [CertificateOverrideTrue, !Ref CertificateOverrideArn, !Ref ACMCertificate]
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: 443
      Protocol: HTTPS 

  ECSALBSecureListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
        Order: 1
        ForwardConfig:
          TargetGroups: 
            - TargetGroupArn: !Ref ECSTG
              Weight: 1
          TargetGroupStickinessConfig:
            DurationSeconds: 86400
            Enabled: true
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBSecureListener'
      Priority: 1  



  #------------------------------------------#
  # ECS Cluster, tasks and services          #
  #------------------------------------------#

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ServiceName}-cluster"
      #--------Resource Tag block--------#
      Tags:
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico  
      #--------Resource Tag block--------#        

  EcsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      RoleName: !Sub "${ServiceName}-execution-role"
      Policies:
      - PolicyName: Simba-parameter-and-secrets-access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ["ssm:GetParameters", "secretsmanager:GetSecretValue", "kms:Decrypt"]
            Resource:
            - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
            - !Sub "arn:aws:secretmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
            - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
      #--------Resource Tag block--------#
      Tags:
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico  
      #--------Resource Tag block--------#     

  EcsExecutionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: EcsExecutionRoleDefaultPolicy
      Roles:
        - Ref: EcsExecutionRole  

  EcsTaskDefinitionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
       #--------Resource Tag block--------#
      Tags:
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico  
      #--------Resource Tag block--------#    

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image:
            Ref: ECRRepoUri
          Name: !Sub "${ServiceName}-app"
          PortMappings:
            - ContainerPort: 8080
              # HostPort: 80
              Protocol: tcp  
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-stream-prefix: !Sub ${ServiceName}
              awslogs-group: !Ref ServiceLogsGroup
              awslogs-region: !Sub '${AWS::Region}'   
          #---------- Secrets ---------------#
          Secrets:
            #----- Parameter Store item -----#
            #  Can be prefixed or ARN based  #
            - Name: CAAmbiente
              ValueFrom: /Simba/CAApp 
            - Name: CAApp
              ValueFrom: /Simba/CAApp 
            - Name: CAEndpoint
              ValueFrom: /Simba/CAEndpoint
            - Name: CARegionl
              ValueFrom: /Simba/CARegionl
            - Name: CASSO
              ValueFrom: /Simba/CASSO 
            - Name: SimbaBDDriver
              ValueFrom: /Simba/SimbaBDDriver
            - Name: SimbaBDPoolMax
              ValueFrom: /Simba/SimbaBDPoolMax
            - Name: SimbaBDPoolMinIdle
              ValueFrom: /Simba/SimbaBDPoolMinIdle           
            - Name: SimbaBDUrl
              ValueFrom: /Simba/SimbaBDUrl
            - Name: SimbaBDUsername
              ValueFrom: /Simba/SimbaBDUsername 
            - Name: SimbaLoggingAppLevel
              ValueFrom: /Simba/SimbaLoggingAppLevel
            - Name: SimbaLoggingHttpLevel
              ValueFrom: /Simba/SimbaLoggingHttpLevel
            - Name: SimbaLoggingRootLevel
              ValueFrom: /Simba/SimbaLoggingRootLevel 
            - Name: SimbaLoggingSQLLevel
              ValueFrom: /Simba/SimbaLoggingSQLLevel 
            - Name: SimbaLoggingSpringLevel
              ValueFrom: /Simba/SimbaLoggingSpringLevel
            - Name: SimbaUser
              ValueFrom: /Simba/SimbaUser

            #### Secrets as parameter store today. Need to change them to Secrets
            - Name: CA_PASSWORD
              ValueFrom: /Simba/CA_PASSWORD
            - Name: SIMBA_PASS
              ValueFrom: /Simba/SIMBA_PASS
            - Name: /SimbaBDPassword
              ValueFrom: /Simba/SimbaBDPassword             


            # - Name: CA_PASSWORD
            #   ValueFrom:
            #     !Sub 
            #       - '${EnvSecret}:SimbaCA_PASSWORD::'
            #       - EnvSecret: !ImportValue SimbaSecretArn
            # - Name: SIMBA_PASS
            #   ValueFrom: 
            #     !Sub 
            #       - '${EnvSecret}:SIMBA_PASS::'
            #       - EnvSecret: !ImportValue SimbaSecretArn
            # - Name: SimbaBDPassword
            #   ValueFrom: 
            #     !Sub 
            #       - '${EnvSecret}:SimbaBDPassword::'
            #       - EnvSecret: !ImportValue SimbaSecretArn
          #---------- Secrets ---------------#            
      Cpu: "1024"
      ExecutionRoleArn:
        Fn::GetAtt:
          - EcsExecutionRole
          - Arn
      Family: !Sub "${ServiceName}-task-definition"
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - EcsTaskDefinitionRole
          - Arn
     
      #--------Resource Tag block--------#
      Tags:
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico  
      #--------Resource Tag block--------#    

  EcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: EcsCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Select [0, !Ref ServiceSubnet]
            - !Select [1, !Ref ServiceSubnet]
      ServiceName: !Sub "${ServiceName}-service"
      TaskDefinition:
        Ref: EcsTaskDefinition
      LoadBalancers:
      - ContainerName: !Sub "${ServiceName}-app" 
        ContainerPort: 8080 ### << Consider refer to a parameter container tcp port.
        TargetGroupArn: !Ref ECSTG
      #--------Resource Tag block--------#
      Tags:
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico  
      #--------Resource Tag block--------#    
 

  #------------------------------------------#
  # WAF and association with ALB
  #------------------------------------------#
  # Create a Web Application Firewall and associate with the ALB
  # Associate with the AWSManagedRulesCommonRuleSet and AWSManagedRulesSQLiRuleSet
  WAFv2RuleRateBased:
    Type: AWS::WAFv2::RuleGroup
    Properties:
      Name: Simba-waf-rate-based-limit
      Capacity: 2
      VisibilityConfig: 
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: simba-waf-rate-based-limit
      Scope: "REGIONAL"
      Rules: 
        - Name: "RateBasedLimit-rule"
          Priority: 1
          Action: 
            Count: {}
          Statement: 
            RateBasedStatement: 
              Limit: !Ref ParamRateBasedLimit
              AggregateKeyType: "IP"
          VisibilityConfig: 
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: "RateBasedLimit"
      #--------Resource Tag block--------#
      Tags:
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico  
      #--------Resource Tag block--------#    

  WafAcl:
    Type: "AWS::WAFv2::WebACL"
    Properties:
      Name: "Simba-WAF-Protections"
      Scope: "REGIONAL"
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: "Simba-WAF-Protections"
        SampledRequestsEnabled: true
      Rules:
        - Name: "Simba-rate-base-limit"
          Priority: 0
          OverrideAction: 
              None: {}
          Statement: 
              RuleGroupReferenceStatement: 
                  Arn: !GetAtt WAFv2RuleRateBased.Arn
          VisibilityConfig: 
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: "Simba-rate-base-limit"
        - Name: "AWSManagedRulesCommonRule"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesCommonRuleSet"
              ExcludedRules: 
                - Name: SizeRestrictions_BODY
          Priority: 1
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: "AWSManagedRulesCommonRule"
            SampledRequestsEnabled: true
        - Name: "AWSManagedRulesKnownBadInputsRule"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesKnownBadInputsRuleSet"
          Priority: 2
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: "AWSManagedRulesKnownBadInputsRule"
            SampledRequestsEnabled: true
        - Name: "AWSManagedRulesAmazonIpReputation"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesAmazonIpReputationList"
          Priority: 3
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: "AWSManagedRulesAmazonIpReputation"
            SampledRequestsEnabled: true
        - Name: "AWSManagedRulesSQLiRule"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesSQLiRuleSet"
          Priority: 4
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: "AWSManagedRulesSQLiRule"
            SampledRequestsEnabled: true
      #--------Resource Tag block--------#
      Tags:
        - Key: "ops-ambiente"
          Value: !Ref OpsAmbiente
        - Key: "ops-produto"
          Value: !Ref OpsProduto
        - Key: "sec-conformidade"
          Value: !Ref SecConformidade
        - Key: "ops-servico"
          Value: !Ref OpsServico  
      #--------Resource Tag block--------#    

  WAFACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties: 
      ResourceArn: !Ref ECSALB
      WebACLArn: !GetAtt WafAcl.Arn
     
#### ///// ####
Outputs:
  ExportsOutputRefCluster:
    Value:
      Ref: EcsCluster
    Export:
      Name: !Sub "${ServiceName}:ExportsOutputRefCluster"

  ExportsOutputFnGetAttServiceName:
    Value:
      Fn::GetAtt:
        - EcsService
        - Name
    Export:
      Name: !Sub "${ServiceName}:ExportsOutputFnGetAttServiceName"

  ExportsOutputServiceSg:
    Value:
      Ref: ServiceSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-ServiceSecurityGroup"